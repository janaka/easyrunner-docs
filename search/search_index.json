{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EasyRunner.xyz","text":"<p>Own your stack. No surprise bills.</p>"},{"location":"features/","title":"Features","text":""},{"location":"features/#server-spin-up-automation","title":"Server Spin Up Automation","text":"<p>Launch an Ubuntu VPS/VM in your cloud provider account with a single <code>er server create</code> command.</p>"},{"location":"features/#configure-a-server-as-a-web-host","title":"Configure a Server as a Web Host","text":"<p>A single <code>er server init</code> command config your Ubuntu VPS/VM as a secure web host.</p>"},{"location":"features/#container-based-hosting","title":"Container Based Hosting","text":"<p>Your applications run in containers. Podman is the container runtime.</p>"},{"location":"features/#cicd-deploy-easily","title":"CI/CD - Deploy Easily","text":"<p>Several CI/CD flows to securely deploy you application.</p>"},{"location":"features/#host-multiple-apps-on-a-single-server","title":"Host Multiple Apps on a Single Server","text":"<p>Gives you the option the host multiple apps on a large server.</p>"},{"location":"features/#manage-multiple-web-hosts","title":"Manage Multiple Web Hosts","text":"<p>Give you the option to host each app on a smaller server or spread your apps across servers as you wish.</p>"},{"location":"features/#apps-can-be-composed-of-several-services","title":"Apps can be composed of several services","text":"<p>Define your application's composition using as a Docker compose file. You can define your UI and public API containers as public. Internal service containers will be on the internal network only.</p>"},{"location":"features/#predictable-cost","title":"Predictable Cost","text":"<p>You pick your cloud provider and server product hence know your where your cost is capped.</p>"},{"location":"features/#no-lock-in","title":"No Lock-in","text":"<p>The freedom to switch cloud server provider. As easy as launching a server with the new provider. Run <code>er server init</code> and <code>er app deploy</code>. Finally cut over your DNS.</p> <p>Don't want to use EasyRunner any longer. No problem, you can still manually manage your servers.</p>"},{"location":"how-it-works/","title":"How It Works","text":"<ol> <li>You provide an Ubuntu server (cloud VM, VPS, or bare metal).</li> <li>Install the EasyRunner CLI on your laptop.</li> <li>EasyRunner configures the server and deploys your app securely.</li> </ol>"},{"location":"how-it-works/#why-you-should-choose-easyrunner","title":"Why you should choose EasyRunner","text":"<ul> <li>Predictable pricing: you run your own server, so there are no unexpected hosting fees.</li> <li>Self-hosted, agent-less: EasyRunner connects via SSH from the CLI and configures your server \u2014 no persistent agents or third-party control planes.</li> <li>Open stack: built entirely on open-source components.</li> <li>Fast to get started: bring an Ubuntu server and the CLI handles configuration and deployment.</li> </ul> <p>Note</p> <p>EasyRunner is still an alpha version, meaning it's being rapidly developed therefore unstable.</p> <p>Read more : Why Behind EasyRunner</p> <p></p>"},{"location":"install/","title":"Install","text":""},{"location":"install/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>Python 3.12+ (recommend using pyenv)</li> </ul>"},{"location":"install/#install-easyrunner-cli","title":"Install EasyRunner CLI","text":"<p>EasyRunner is a tool with a Command Line Interface that runs on your laptop.</p> <p>Use one of the method below to install it.</p> macOSWindows pipHomebrew <p>Coming</p> <p>Coming</p> <p>Not Supported yet.</p>"},{"location":"blog/","title":"Blog Posts","text":""},{"location":"blog/2025/09/09/easyrunner-secure-network-architecture/","title":"EasyRunner Secure Network Architecture","text":"<p>Every aspect of EasyRunner is designed with security in mind. While it's impossible for anybody to guarantee of being 100% secure, making security a first class design requirement goes a long way to significantly reducing the risk. A web host server has multiple vectors that needs to be secured. Here's how networking of a host server get's configured with network security in mind.</p> <p></p> <p>The goal with the network setup is to reduce the surface area to a minimum. We explicitly only allow what's needed. Drop everything else by default. We generally follow the defense in depth principle.</p>","tags":["firewall","caddy","reverse proxy","security","networking"]},{"location":"blog/2025/09/09/easyrunner-secure-network-architecture/#os-firewall","title":"OS Firewall","text":"<ul> <li>Implemented using IPTables.</li> <li>Default drop all policy</li> <li>Explicit allow 80, 443, 22</li> <li>80 and 443 port redirects to reverse proxy that listing on 8080 and 8443.</li> <li>Only allow established connections to 8080 and 8443 i.e. externally port forward traffic. Local traffic is blocked.</li> <li>Port 2019 traffic restricted to just localhost. Explicit block rule for external traffic (defense in depth)</li> </ul>","tags":["firewall","caddy","reverse proxy","security","networking"]},{"location":"blog/2025/09/09/easyrunner-secure-network-architecture/#caddy-reverse-proxy","title":"Caddy Reverse Proxy","text":"<ul> <li>Runs in a container in the context of it's own OS user account</li> <li>Bind to all host network interfaces on ports 8080, 8443 (maintain high ports only binding in rootless mode)</li> <li>Bind to host localhost on port 2019 (Caddy Admin API)</li> <li>Configured to always redirect HTTP -&gt; HTTPS (ensures HTTPS always)</li> <li>TLS certificated are automatically setup for every application with certs issued by Let's Encrypt.</li> <li>Minimise information leaking that can be used by bad actors to identify vulnerable system. For example: remove X-Powered header.</li> </ul>","tags":["firewall","caddy","reverse proxy","security","networking"]},{"location":"blog/2025/09/09/easyrunner-secure-network-architecture/#app-containers","title":"App Containers","text":"<ul> <li>Containers in each app stack run in the context of a dedicated OS user account. One per stack.</li> <li>Containers do NOT bind to host ports. Therefore only accessible on the proxy network.</li> </ul>","tags":["firewall","caddy","reverse proxy","security","networking"]},{"location":"blog/2025/07/03/why-behind-easyrunner/","title":"Why Behind EasyRunner","text":"<p>What motivated building EasyRunner.</p> <p>Original post https://janaka.dev/side-project-intro-easyrunner/</p>","tags":["behind-the-scenes"]},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/category/architecture/","title":"Architecture","text":""},{"location":"blog/category/behind-the-scenes/","title":"behind-the-scenes","text":""}]}